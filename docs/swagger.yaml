basePath: /api/v1
definitions:
  domain.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  domain.Empty:
    type: object
  domain.ResponseSingleData-domain_Empty:
    properties:
      code:
        description: number
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/domain.Empty'
        description: of data
      message:
        description: string
        type: string
      status:
        description: string
        type: string
    type: object
  domain.UpdateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
    required:
    - email
    - name
    type: object
  domain.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /users:
    get:
      description: Get all user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ResponseSingleData-domain_Empty'
      security:
      - ApiKeyAuth: []
      summary: List user
      tags:
      - user
    post:
      consumes:
      - application/json
      description: create a new user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.CreateUserRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ResponseSingleData-domain_Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ResponseSingleData-domain_Empty'
      summary: Create user
      tags:
      - user
  /users/{id}:
    delete:
      description: delete an existing user entry by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ResponseSingleData-domain_Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ResponseSingleData-domain_Empty'
      security:
      - ApiKeyAuth: []
      summary: Delete user
      tags:
      - user
    get:
      description: Get user details by ID
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ResponseSingleData-domain_Empty'
      security:
      - ApiKeyAuth: []
      summary: Get user by ID
      tags:
      - user
    put:
      consumes:
      - application/json
      description: update an existing user entry by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ResponseSingleData-domain_Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ResponseSingleData-domain_Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ResponseSingleData-domain_Empty'
      security:
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - user
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
