// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/edwinjordan/MajooTest-Golang/domain"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewPostsRepository creates a new instance of PostsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostsRepository {
	mock := &PostsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PostsRepository is an autogenerated mock type for the PostsRepository type
type PostsRepository struct {
	mock.Mock
}

type PostsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PostsRepository) EXPECT() *PostsRepository_Expecter {
	return &PostsRepository_Expecter{mock: &_m.Mock}
}

// CreatePosts provides a mock function for the type PostsRepository
func (_mock *PostsRepository) CreatePosts(ctx context.Context, posts *domain.CreatePostsRequest) (*domain.Posts, error) {
	ret := _mock.Called(ctx, posts)

	if len(ret) == 0 {
		panic("no return value specified for CreatePosts")
	}

	var r0 *domain.Posts
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.CreatePostsRequest) (*domain.Posts, error)); ok {
		return returnFunc(ctx, posts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.CreatePostsRequest) *domain.Posts); ok {
		r0 = returnFunc(ctx, posts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Posts)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.CreatePostsRequest) error); ok {
		r1 = returnFunc(ctx, posts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PostsRepository_CreatePosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePosts'
type PostsRepository_CreatePosts_Call struct {
	*mock.Call
}

// CreatePosts is a helper method to define mock.On call
//   - ctx context.Context
//   - posts *domain.CreatePostsRequest
func (_e *PostsRepository_Expecter) CreatePosts(ctx interface{}, posts interface{}) *PostsRepository_CreatePosts_Call {
	return &PostsRepository_CreatePosts_Call{Call: _e.mock.On("CreatePosts", ctx, posts)}
}

func (_c *PostsRepository_CreatePosts_Call) Run(run func(ctx context.Context, posts *domain.CreatePostsRequest)) *PostsRepository_CreatePosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.CreatePostsRequest
		if args[1] != nil {
			arg1 = args[1].(*domain.CreatePostsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PostsRepository_CreatePosts_Call) Return(posts1 *domain.Posts, err error) *PostsRepository_CreatePosts_Call {
	_c.Call.Return(posts1, err)
	return _c
}

func (_c *PostsRepository_CreatePosts_Call) RunAndReturn(run func(ctx context.Context, posts *domain.CreatePostsRequest) (*domain.Posts, error)) *PostsRepository_CreatePosts_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePost provides a mock function for the type PostsRepository
func (_mock *PostsRepository) DeletePosts(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PostsRepository_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type PostsRepository_DeletePosts_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *PostsRepository_Expecter) DeletePosts(ctx interface{}, id interface{}) *PostsRepository_DeletePosts_Call {
	return &PostsRepository_DeletePosts_Call{Call: _e.mock.On("DeletePost", ctx, id)}
}

func (_c *PostsRepository_DeletePosts_Call) Run(run func(ctx context.Context, id uuid.UUID)) *PostsRepository_DeletePosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PostsRepository_DeletePosts_Call) Return(err error) *PostsRepository_DeletePosts_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PostsRepository_DeletePosts_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *PostsRepository_DeletePosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetPosts provides a mock function for the type PostsRepository
func (_mock *PostsRepository) GetPosts(ctx context.Context, id uuid.UUID) (*domain.Posts, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPosts")
	}

	var r0 *domain.Posts
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Posts, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Posts); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Posts)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PostsRepository_GetPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPosts'
type PostsRepository_GetPosts_Call struct {
	*mock.Call
}

// GetPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *PostsRepository_Expecter) GetPosts(ctx interface{}, id interface{}) *PostsRepository_GetPosts_Call {
	return &PostsRepository_GetPosts_Call{Call: _e.mock.On("GetPosts", ctx, id)}
}

func (_c *PostsRepository_GetPosts_Call) Run(run func(ctx context.Context, id uuid.UUID)) *PostsRepository_GetPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PostsRepository_GetPosts_Call) Return(posts *domain.Posts, err error) *PostsRepository_GetPosts_Call {
	_c.Call.Return(posts, err)
	return _c
}

func (_c *PostsRepository_GetPosts_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*domain.Posts, error)) *PostsRepository_GetPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostsList provides a mock function for the type PostsRepository
func (_mock *PostsRepository) GetPostsList(ctx context.Context, filter *domain.PostsFilter) ([]domain.Posts, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetPostsList")
	}

	var r0 []domain.Posts
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.PostsFilter) ([]domain.Posts, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.PostsFilter) []domain.Posts); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Posts)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.PostsFilter) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PostsRepository_GetPostsList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostsList'
type PostsRepository_GetPostsList_Call struct {
	*mock.Call
}

// GetPostsList is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *domain.PostsFilter
func (_e *PostsRepository_Expecter) GetPostsList(ctx interface{}, filter interface{}) *PostsRepository_GetPostsList_Call {
	return &PostsRepository_GetPostsList_Call{Call: _e.mock.On("GetPostsList", ctx, filter)}
}

func (_c *PostsRepository_GetPostsList_Call) Run(run func(ctx context.Context, filter *domain.PostsFilter)) *PostsRepository_GetPostsList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.PostsFilter
		if args[1] != nil {
			arg1 = args[1].(*domain.PostsFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PostsRepository_GetPostsList_Call) Return(posts []domain.Posts, err error) *PostsRepository_GetPostsList_Call {
	_c.Call.Return(posts, err)
	return _c
}

func (_c *PostsRepository_GetPostsList_Call) RunAndReturn(run func(ctx context.Context, filter *domain.PostsFilter) ([]domain.Posts, error)) *PostsRepository_GetPostsList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePosts provides a mock function for the type PostsRepository
func (_mock *PostsRepository) UpdatePosts(ctx context.Context, id uuid.UUID, posts *domain.Posts) (*domain.Posts, error) {
	ret := _mock.Called(ctx, id, posts)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePosts")
	}

	var r0 *domain.Posts
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.Posts) (*domain.Posts, error)); ok {
		return returnFunc(ctx, id, posts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.Posts) *domain.Posts); ok {
		r0 = returnFunc(ctx, id, posts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Posts)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *domain.Posts) error); ok {
		r1 = returnFunc(ctx, id, posts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PostsRepository_UpdatePosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePosts'
type PostsRepository_UpdatePosts_Call struct {
	*mock.Call
}

// UpdatePosts is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - posts *domain.Posts
func (_e *PostsRepository_Expecter) UpdatePosts(ctx interface{}, id interface{}, posts interface{}) *PostsRepository_UpdatePosts_Call {
	return &PostsRepository_UpdatePosts_Call{Call: _e.mock.On("UpdatePosts", ctx, id, posts)}
}

func (_c *PostsRepository_UpdatePosts_Call) Run(run func(ctx context.Context, id uuid.UUID, posts *domain.Posts)) *PostsRepository_UpdatePosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *domain.Posts
		if args[2] != nil {
			arg2 = args[2].(*domain.Posts)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PostsRepository_UpdatePosts_Call) Return(posts1 *domain.Posts, err error) *PostsRepository_UpdatePosts_Call {
	_c.Call.Return(posts1, err)
	return _c
}

func (_c *PostsRepository_UpdatePosts_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, posts *domain.Posts) (*domain.Posts, error)) *PostsRepository_UpdatePosts_Call {
	_c.Call.Return(run)
	return _c
}
